May 2021 release of PcapPlusPlus (v21.05)
=========================================

PcapPlusPlus web-site:  https://pcapplusplus.github.io/

GitHub page:            https://github.com/seladb/PcapPlusPlus


This package contains:
----------------------

 - PcapPlusPlus compiled libraries
    - Common++.lib
    - Packet++.lib
    - Pcap++.lib
 - These libraries are compiled in 4 different configurations (each containing all libraries above):
    - 32bit debug configuration (`x86\Debug`)
    - 32bit release configuration (`x86\Release`)
    - 64bit debug configuration (`x64\Debug`)
    - 64bit release configuration (`x64\Release`)
 - PcapPlusPlus header files (under `header\`)
 - Compiled examples:
    - 32bit executables (under `x86\examples`)
    - 64bit executables (under `x64\examples`)
 - Visual Studio example solution configured to work with PcapPlusPlus compiled binaries (under `ExampleProject\`)


Running the examples:
---------------------

 - Make sure you have WinPcap, Npcap or Wireshark installed
 - Make sure you have Visual C++ Redistributable for Visual Studio installed
 - If examples still don't run, install Visual C++ Redistributable for Visual Studio 2010 also


In order to compile your application with these binaries you need to:
---------------------------------------------------------------------

 - Make sure you have Microsoft Visual Studio installed
 - Make sure you have WinPcap or Npcap Developer's pack installed (WinPcap Dev Pack can be downloaded from https://www.winpcap.org/devel.htm, Npcap SDK can be downloaded from https://nmap.org/npcap/#download)
 - Make sure you have pthread-win32 (can be downloaded from: https://github.com/seladb/PcapPlusPlus-Deploy/raw/master/Packages/pthreads-w32-2-9-1-release.zip)
 - You need to add to your project all of the include and binary paths required for PcapPlusPlus. The best option is to copy the configuration of the ExampleProject (under `ExampleProject\` folder). Another option
   is to use the ExampleProject solution, delete all the code from it and start writing your own code
 - Before using the ExampleProject solution please make sure you update the following details in `PcapPlusPlusPropertySheet.props` file (inside `ExampleProject\` folder):
    - Set the value of the `PcapPlusPlusHome` to the folder where PcapPlusPlus binaries package is located (the one you downloaded)
    - Set the value of the `PcapSdkHome` to the folder where WinPcap/Npcap Developer's Pack is located
    - Set the value of the `PThreadWin32Home` to the folder where pthread-win32 is located
 - Now you can load the solution and build it. You can switch between Debug/Release and x86/x64 configurations
 - If you get an error of `The Windows SDK version 8.1 is not found` follow these steps:
    - Right click on `ExampleProject` project -> Choose "Properties"
    - Go to "Configuration Properties" -> "General"
    - Open the drop down list next to "Windows SDK version" and choose the version installed on your machine
 - Build result will be in `ExampleProject\Debug` or `ExampleProject\Release` (according to chosen configuration)


Release notes (changes from v20.08)
-----------------------------------

- Added official [Android support](https://pcapplusplus.github.io/docs/quickstart/android)!
- [TLS fingerprinting](https://pcapplusplus.github.io/docs/features#tls-fingerprinting) based on [JA3](https://engineering.salesforce.com/tls-fingerprinting-with-ja3-and-ja3s-247362855967)
  - Extract TLS fingerprints from TLS ClientHello and ServerHello packets
  - TLS fingerprinting [example app](https://pcapplusplus.github.io/docs/examples#tlsfingerprinting)
- TLS 1.3 support
- A brand new [DPDK setup script](https://pcapplusplus.github.io/docs/dpdk#initialization-before-application-is-run) written in Python that makes it easier to setup DPDK
- Apple silicon M1 support (thanks @szigetics !)
- Significant size reduction of PcapPlusPlus compiled libraries
- Calculate a packet's network data size before sending a packet and make sure it doesn't exceed the MTU (thanks @SamuelBailey !)
- UDP multicast support (thanks @mmizi !)
  - Add `isMulticast()` property to `IPAddress`, `IPv4Address`, `IPv6Address`
  - PcapSplitter: take into consideration multicast packets when splitting by client/server IP/port 
- New protocol support:
  - SSH (parsing only)
  - IP Sec (AH + ESP, parsing only)
- Existing protocol enhancement:
  - DNS over TCP
  - Parse 2 new TLS extensions: Supported Groups and EC Point Format
  - Added a new `IPLayer` interface to abstract `IPv4Layer` and `IPv6Layer`
  - Added convenient methods to fetch source and dest ports in TCP and UDP layers
  - GRE layer - add Transparent Ethernet Bridging support (thanks @justin-parus !)
- Major header files cleanup: remove platform-specific includes, remove `pcap.h` from PcapPlusPlus includes, remove redundant header files, replace c-str arguments with C++ `std::string`
- New API method to search `PcapLiveDevice` [by IP address or name](https://pcapplusplus.github.io/api-docs/classpcpp_1_1_pcap_live_device_list.html#aadf609084e161df94c14109d42b94544)
- Parse packets with link type of `LINKTYPE_IPV4` and `LINKTYPE_IPV6` (thanks @miketruman !)
- TCP reassembly
  - Add configurable out-of-order packets per flow limit (thanks @LeonBuikstraFox !)
  - Expose missing bytes size on data loss (thanks @cryptocode !)
- `hash5Tuple` improvements (thanks @miketruman !)
- Fix Makefile dependencies - detect when header files are changed (thanks @amirgon !)
- Recognize `*.zstd` file extension in `IFileReaderDevice::getReader()` (thanks @naugler !)
- Moved a large portion of PcapPlusPlus CI to GitHub Actions
- Tons of bug fixes (thank you to everyone who reported issues and contributed bugfixes!)


Contributors
------------

Thank you for everyone who contributed to this release:

- @mmizi
- @github-euronext
- @szigetics
- @SamuelBailey
- @nickamon
- @naugler
- @skorup101
- @amirgon
- @cartman-156
- amritanshu.johri
- @weyrick
- @justin-parus
- @LeonBuikstraFox
- @miketruman
- Julian HÃ¤rig
- @clementperon
- @cryptocode
- @ramazantokay